// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __javax_swing_DebugGraphics__
#define __javax_swing_DebugGraphics__

#pragma interface

#include <java/awt/Graphics.h>
#include <gcj/array.h>

extern "Java"
{
  namespace javax
  {
    namespace swing
    {
      class DebugGraphics;
      class JComponent;
    }
  }
  namespace java
  {
    namespace text
    {
      class AttributedCharacterIterator;
    }
    namespace awt
    {
      namespace image
      {
        class ImageObserver;
      }
      class Shape;
      class Rectangle;
      class FontMetrics;
      class Font;
      class Color;
      class Image;
      class Graphics;
    }
  }
}

class javax::swing::DebugGraphics : public ::java::awt::Graphics
{
public:
  DebugGraphics ();
  DebugGraphics (::java::awt::Graphics *, ::javax::swing::JComponent *);
  DebugGraphics (::java::awt::Graphics *);
  virtual void setColor (::java::awt::Color *) { }
  virtual ::java::awt::Graphics *create () { return 0; }
  virtual ::java::awt::Graphics *create (jint, jint, jint, jint) { return 0; }
  static ::java::awt::Color *flashColor () { return 0; }
  static void setFlashColor (::java::awt::Color *) { }
  static jint flashTime ();
  static void setFlashTime (jint) { }
  static jint flashCount ();
  static void setFlashCount (jint) { }
  static ::java::io::PrintStream *logStream () { return 0; }
  static void setLogStream (::java::io::PrintStream *) { }
  virtual ::java::awt::Font *getFont () { return 0; }
  virtual void setFont (::java::awt::Font *) { }
  virtual ::java::awt::Color *getColor () { return 0; }
  virtual ::java::awt::FontMetrics *getFontMetrics () { return 0; }
  virtual ::java::awt::FontMetrics *getFontMetrics (::java::awt::Font *) { return 0; }
  virtual void translate (jint, jint) { }
  virtual void setPaintMode () { }
  virtual void setXORMode (::java::awt::Color *) { }
  virtual ::java::awt::Rectangle *getClipBounds () { return 0; }
  virtual void clipRect (jint, jint, jint, jint) { }
  virtual void setClip (jint, jint, jint, jint) { }
  virtual ::java::awt::Shape *getClip () { return 0; }
  virtual void setClip (::java::awt::Shape *) { }
  virtual void drawRect (jint, jint, jint, jint) { }
  virtual void fillRect (jint, jint, jint, jint) { }
  virtual void clearRect (jint, jint, jint, jint) { }
  virtual void drawRoundRect (jint, jint, jint, jint, jint, jint) { }
  virtual void fillRoundRect (jint, jint, jint, jint, jint, jint) { }
  virtual void drawLine (jint, jint, jint, jint) { }
  virtual void draw3DRect (jint, jint, jint, jint, jboolean) { }
  virtual void fill3DRect (jint, jint, jint, jint, jboolean) { }
  virtual void drawOval (jint, jint, jint, jint) { }
  virtual void fillOval (jint, jint, jint, jint) { }
  virtual void drawArc (jint, jint, jint, jint, jint, jint) { }
  virtual void fillArc (jint, jint, jint, jint, jint, jint) { }
  virtual void drawPolyline (jintArray, jintArray, jint) { }
  virtual void drawPolygon (jintArray, jintArray, jint) { }
  virtual void fillPolygon (jintArray, jintArray, jint) { }
  virtual void drawString (::java::lang::String *, jint, jint) { }
  virtual void drawString (::java::text::AttributedCharacterIterator *, jint, jint) { }
  virtual void drawBytes (jbyteArray, jint, jint, jint, jint) { }
  virtual void drawChars (jcharArray, jint, jint, jint, jint) { }
  virtual jboolean drawImage (::java::awt::Image *, jint, jint, ::java::awt::image::ImageObserver *);
  virtual jboolean drawImage (::java::awt::Image *, jint, jint, jint, jint, ::java::awt::image::ImageObserver *);
  virtual jboolean drawImage (::java::awt::Image *, jint, jint, ::java::awt::Color *, ::java::awt::image::ImageObserver *);
  virtual jboolean drawImage (::java::awt::Image *, jint, jint, jint, jint, ::java::awt::Color *, ::java::awt::image::ImageObserver *);
  virtual jboolean drawImage (::java::awt::Image *, jint, jint, jint, jint, jint, jint, jint, jint, ::java::awt::image::ImageObserver *);
  virtual jboolean drawImage (::java::awt::Image *, jint, jint, jint, jint, jint, jint, jint, jint, ::java::awt::Color *, ::java::awt::image::ImageObserver *);
  virtual void copyArea (jint, jint, jint, jint, jint, jint) { }
  virtual void dispose () { }
  virtual jboolean isDrawingBuffer ();
public: // actually package-private
  virtual ::java::lang::String *toShortString () { return 0; }
public:
  virtual void setDebugOptions (jint) { }
  virtual jint getDebugOptions ();
public: // actually package-private
  ::java::awt::Graphics * __attribute__((aligned(__alignof__( ::java::awt::Graphics )))) graphics;
  ::java::awt::Image *buffer;
  jint debugOptions;
  jint graphicsID;
  jint xOffset;
  jint yOffset;
public:
  static const jint LOG_OPTION = 1L;
  static const jint FLASH_OPTION = 2L;
  static const jint BUFFERED_OPTION = 4L;
  static const jint NONE_OPTION = -1L;

  static ::java::lang::Class class$;
};

#endif /* __javax_swing_DebugGraphics__ */
