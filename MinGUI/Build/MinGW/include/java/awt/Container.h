// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __java_awt_Container__
#define __java_awt_Container__

#pragma interface

#include <java/awt/Component.h>
#include <gcj/array.h>

extern "Java"
{
  namespace java
  {
    namespace beans
    {
      class PropertyChangeListener;
      class PropertyChangeSupport;
    }
    namespace awt
    {
      class Container$GfxVisitor;
      class ComponentOrientation;
      class FocusTraversalPolicy;
      class Container;
      class Point;
      class Event;
      class AWTEvent;
      class Graphics;
      class Font;
      class Insets;
      namespace event
      {
        class ContainerEvent;
        class ContainerListener;
      }
      class Dimension;
      class LightweightDispatcher;
      class LayoutManager;
      class Component;
    }
  }
}

class java::awt::Container : public ::java::awt::Component
{
public:
  Container ();
  virtual jint getComponentCount () { return ncomponents; }
  virtual jint countComponents ();
  virtual ::java::awt::Component *getComponent (jint);
  virtual JArray< ::java::awt::Component *> *getComponents ();
public:  // actually protected
  virtual void swapComponents (jint, jint);
public:
  virtual ::java::awt::Insets *getInsets ();
  virtual ::java::awt::Insets *insets ();
  virtual ::java::awt::Component *add (::java::awt::Component *);
  virtual ::java::awt::Component *add (::java::lang::String *, ::java::awt::Component *);
  virtual ::java::awt::Component *add (::java::awt::Component *, jint);
  virtual void add (::java::awt::Component *, ::java::lang::Object *);
  virtual void add (::java::awt::Component *, ::java::lang::Object *, jint);
public:  // actually protected
  virtual void addImpl (::java::awt::Component *, ::java::lang::Object *, jint);
public:
  virtual void remove (jint);
  virtual void remove (::java::awt::Component *);
  virtual void removeAll ();
  virtual ::java::awt::LayoutManager *getLayout () { return layoutMgr; }
  virtual void setLayout (::java::awt::LayoutManager *);
  virtual void doLayout ();
  virtual void layout ();
  virtual void invalidate ();
  virtual void validate ();
public:  // actually protected
  virtual void validateTree ();
public:
  virtual void setFont (::java::awt::Font *);
  virtual ::java::awt::Dimension *getPreferredSize ();
  virtual ::java::awt::Dimension *preferredSize ();
  virtual ::java::awt::Dimension *getMinimumSize ();
  virtual ::java::awt::Dimension *minimumSize ();
  virtual ::java::awt::Dimension *getMaximumSize ();
  virtual jfloat getAlignmentX ();
  virtual jfloat getAlignmentY ();
  virtual void paint (::java::awt::Graphics *);
  virtual void update (::java::awt::Graphics *);
  virtual void print (::java::awt::Graphics *);
  virtual void paintComponents (::java::awt::Graphics *);
  virtual void printComponents (::java::awt::Graphics *);
  virtual void addContainerListener (::java::awt::event::ContainerListener *);
  virtual void removeContainerListener (::java::awt::event::ContainerListener *);
  virtual JArray< ::java::awt::event::ContainerListener *> *getContainerListeners ();
  virtual JArray< ::java::util::EventListener *> *getListeners (::java::lang::Class *);
public:  // actually protected
  virtual void processEvent (::java::awt::AWTEvent *);
  virtual void processContainerEvent (::java::awt::event::ContainerEvent *);
public:
  virtual void deliverEvent (::java::awt::Event *) { }
  virtual ::java::awt::Component *getComponentAt (jint, jint);
  virtual ::java::awt::Component *locate (jint, jint);
  virtual ::java::awt::Component *getComponentAt (::java::awt::Point *);
  virtual ::java::awt::Component *findComponentAt (jint, jint);
  virtual ::java::awt::Component *findComponentAt (::java::awt::Point *);
  virtual void addNotify ();
  virtual void removeNotify ();
  virtual jboolean isAncestorOf (::java::awt::Component *);
public:  // actually protected
  virtual ::java::lang::String *paramString ();
public:
  virtual void list (::java::io::PrintStream *, jint);
  virtual void list (::java::io::PrintWriter *, jint);
  virtual void setFocusTraversalKeys (jint, ::java::util::Set *);
  virtual ::java::util::Set *getFocusTraversalKeys (jint);
  virtual jboolean areFocusTraversalKeysSet (jint);
  virtual jboolean isFocusCycleRoot (::java::awt::Container *);
  virtual void transferFocusBackward () { }
  virtual void setFocusTraversalPolicy (::java::awt::FocusTraversalPolicy *) { }
  virtual ::java::awt::FocusTraversalPolicy *getFocusTraversalPolicy () { return 0; }
  virtual jboolean isFocusTraversalPolicySet ();
  virtual void setFocusCycleRoot (jboolean) { }
  virtual jboolean isFocusCycleRoot ();
  virtual void transferFocusDownCycle () { }
  virtual void applyComponentOrientation (::java::awt::ComponentOrientation *);
  virtual void addPropertyChangeListener (::java::beans::PropertyChangeListener *);
  virtual void addPropertyChangeListener (::java::lang::String *, ::java::beans::PropertyChangeListener *);
private:
  void visitChildren (::java::awt::Graphics *, ::java::awt::Container$GfxVisitor *, jboolean);
  void visitChild (::java::awt::Graphics *, ::java::awt::Container$GfxVisitor *, ::java::awt::Component *);
public: // actually package-private
  virtual void dispatchEventImpl (::java::awt::AWTEvent *);
  virtual ::java::awt::Component *findNextFocusComponent (::java::awt::Component *);
private:
  void addNotifyContainerChildren ();
  static const jlong serialVersionUID = 4613797578919906343LL;
public: // actually package-private
  jint __attribute__((aligned(__alignof__( ::java::awt::Component ))))  ncomponents;
  JArray< ::java::awt::Component *> *component;
  ::java::awt::LayoutManager *layoutMgr;
  ::java::awt::LightweightDispatcher *dispatcher;
  ::java::awt::Dimension *maxSize;
  jboolean focusCycleRoot;
  jint containerSerializedDataVersion;
  ::java::awt::event::ContainerListener *containerListener;
  ::java::beans::PropertyChangeSupport *changeSupport;

  friend class java_awt_Container$AccessibleAWTContainer;
  friend class java_awt_Container$GfxPrintAllVisitor;
  friend class java_awt_Container$GfxPaintAllVisitor;
  friend class java_awt_Container$GfxPrintVisitor;
  friend class java_awt_Container$GfxPaintVisitor;
  friend class java_awt_Container$GfxVisitor;
public:

  static ::java::lang::Class class$;
};

#endif /* __java_awt_Container__ */
