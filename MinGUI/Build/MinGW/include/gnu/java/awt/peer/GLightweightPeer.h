// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_java_awt_peer_GLightweightPeer__
#define __gnu_java_awt_peer_GLightweightPeer__

#pragma interface

#include <java/lang/Object.h>

extern "Java"
{
  namespace gnu
  {
    namespace java
    {
      namespace awt
      {
        namespace peer
        {
          class GLightweightPeer;
        }
      }
    }
  }
  namespace java
  {
    namespace awt
    {
      class BufferCapabilities$FlipContents;
      class BufferCapabilities;
      namespace event
      {
        class PaintEvent;
      }
      class Cursor;
      class Color;
      class AWTEvent;
      class Toolkit;
      class Dimension;
      class Point;
      class Graphics;
      class FontMetrics;
      class Font;
      class GraphicsConfiguration;
      namespace image
      {
        class VolatileImage;
        class ColorModel;
        class ImageProducer;
        class ImageObserver;
      }
      class Image;
      class Insets;
      class Component;
    }
  }
}

class gnu::java::awt::peer::GLightweightPeer : public ::java::lang::Object
{
public:
  GLightweightPeer (::java::awt::Component *);
  virtual ::java::awt::Insets *insets ();
  virtual ::java::awt::Insets *getInsets ();
  virtual void beginValidate () { }
  virtual void endValidate () { }
  virtual void beginLayout () { }
  virtual void endLayout () { }
  virtual jboolean isPaintPending ();
  virtual jint checkImage (::java::awt::Image *, jint, jint, ::java::awt::image::ImageObserver *);
  virtual ::java::awt::Image *createImage (::java::awt::image::ImageProducer *);
  virtual ::java::awt::Image *createImage (jint, jint) { return 0; }
  virtual void disable () { }
  virtual void dispose () { }
  virtual void enable () { }
  virtual ::java::awt::GraphicsConfiguration *getGraphicsConfiguration () { return 0; }
  virtual ::java::awt::FontMetrics *getFontMetrics (::java::awt::Font *);
  virtual ::java::awt::Graphics *getGraphics () { return 0; }
  virtual ::java::awt::Point *getLocationOnScreen ();
  virtual ::java::awt::Dimension *getMinimumSize ();
  virtual ::java::awt::Dimension *getPreferredSize ();
  virtual ::java::awt::Toolkit *getToolkit () { return 0; }
  virtual void handleEvent (::java::awt::AWTEvent *) { }
  virtual void hide () { }
  virtual jboolean isFocusable ();
  virtual jboolean isFocusTraversable ();
  virtual ::java::awt::Dimension *minimumSize ();
  virtual ::java::awt::Dimension *preferredSize ();
  virtual void paint (::java::awt::Graphics *) { }
  virtual jboolean prepareImage (::java::awt::Image *, jint, jint, ::java::awt::image::ImageObserver *);
  virtual void print (::java::awt::Graphics *) { }
  virtual void repaint (jlong, jint, jint, jint, jint) { }
  virtual void requestFocus () { }
  virtual jboolean requestFocus (::java::awt::Component *, jboolean, jboolean, jlong);
  virtual void reshape (jint, jint, jint, jint) { }
  virtual void setBackground (::java::awt::Color *) { }
  virtual void setBounds (jint, jint, jint, jint) { }
  virtual void setCursor (::java::awt::Cursor *) { }
  virtual void setEnabled (jboolean) { }
  virtual void setEventMask (jlong) { }
  virtual void setFont (::java::awt::Font *) { }
  virtual void setForeground (::java::awt::Color *) { }
  virtual void setVisible (jboolean) { }
  virtual void show () { }
  virtual ::java::awt::image::ColorModel *getColorModel ();
  virtual jboolean isObscured ();
  virtual jboolean canDetermineObscurity ();
  virtual void coalescePaintEvent (::java::awt::event::PaintEvent *) { }
  virtual void updateCursorImmediately () { }
  virtual ::java::awt::image::VolatileImage *createVolatileImage (jint, jint) { return 0; }
  virtual jboolean handlesWheelScrolling ();
  virtual void createBuffers (jint, ::java::awt::BufferCapabilities *) { }
  virtual ::java::awt::Image *getBackBuffer () { return 0; }
  virtual void flip (::java::awt::BufferCapabilities$FlipContents *) { }
  virtual void destroyBuffers () { }
private:
  ::java::awt::Component * __attribute__((aligned(__alignof__( ::java::lang::Object )))) comp;
  ::java::awt::Insets *containerInsets;
public:

  static ::java::lang::Class class$;
};

#endif /* __gnu_java_awt_peer_GLightweightPeer__ */
